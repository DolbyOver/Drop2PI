{
  "name": "Drop2pi",
  "tagline": "This is a simple Dropbox Client tool to sync files to Raspberry PI.",
  "body": "## Drop2PI ##\r\n\r\n[![Build Status](https://travis-ci.org/GuoJing/Drop2PI.png?branch=master)](https://travis-ci.org/GuoJing/Drop2PI) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/GuoJing/drop2pi/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\nSorry for bad English.\r\n\r\nThis is a very simple tool to sync files between Dropbox and Raspberry PI. In fact this command tools can used any system running on Python.\r\n\r\nBut I only wants to sync *small* files to Raspberry PI. So I called this Dropbox to PI.\r\n\r\nBig files are not well supported.\r\n\r\n[Donate Me](http://guojing.me/donate/en/) and support my work.\r\n\r\nTry `python demo.py`.\r\n\r\n## Install ##\r\n\r\nDownload the code and:\r\n\r\n\tpython setup.py install\r\n\r\nOr using pip:\r\n\r\n\tpip install d2pi\r\n\r\n## Config ##\r\n\r\nYou have to go to [Dropbox Develop Page](https://www.dropbox.com/developers/apps) to create a App.\r\n\r\nAfter created a App, you can find `APP_KEY` and `APP_SECRET`.\r\n\r\nYou could run demo.py three times to generate automatically:\r\n\r\n1. First time it will ask you to fill app\\_key and app\\_secret and path\\_to\\_watch.\r\n2. After success and run again, it will ask to auth to dropbox.\r\n3. After success and run again, it will start demo and download files.\r\n\r\n## Config yourself ##\r\n\r\nYou can do it your self:\r\n\r\n    from d2pi.auth import auth\r\n    auth()\r\n\r\nIt will ask you to fill the app\\_key and secret and watch path your self.\r\n\r\nAfter fill up, restart terminal bash and:\r\n\r\n    from d2pi.auth import auth\r\n    auth()\r\n\r\nRun again.\r\n\r\nThis will generate config automatically, remember root user's config is not the same path with normal user.\r\n\r\nOr you can edit your config file at `~/.d2pi/config.yml`, `path_to_watch` is the dir you want to watch.\r\n\r\n## Overall ##\r\n\r\nIn version 0.0.9.2, you can use downloader, uploader and default watcher.\r\n\r\ndownloader:\r\n\r\n\tfrom d2pi.watch import downloader\r\n\tdownloader.run()\r\n\r\ndownloader will only download files to local automatically.\r\n\r\nuploader:\r\n\r\n\tfrom d2pi.watch import uploader\r\n\tuploader.run()\r\n\r\nuploader will only upload files.\r\n\r\nwatcher with auto download:\r\n\r\n\tfrom d2pi.watch import watcher\r\n    watcher.run()\r\n\r\nauto download watcher will modify every events and sync to server.\r\n\r\nThis watcher will watch all events in local like:\r\n\r\n- NEW FILE/DIR\r\n- DELETE FILE/DIR\r\n- MOVE FILE/DIR\r\n\r\n## Important ##\r\n\r\nThe watcher will do anything and watch any events, so:\r\n\r\nIt will cache downloaded files and will be flushed when file statue changed.\r\n\r\nIt have a simple lock, if upload is working, download will be blocked.\r\n\r\nThe same, if auto download is working, then new file could create but upload event will be block.\r\n\r\nBecause this is a simple tool, will not connect to any server and not be pushed by any server.\r\n\r\nWe don't have better way to solve that problem.\r\n\r\nWhy don't we add a queue and insert event to a queue?\r\n\r\nThis tool is using watchdog, every file download will cause a create file event. Then we will upload file again, with same content.\r\n\r\nSo we need block something.\r\n\r\n## Customize watcher ##\r\n\r\nYou can customize watcher yourself:\r\n\r\n    def __init__(self, can_upload=True, can_download=True,\r\n                 can_delete=True, auto_download=False):\r\n        self.can_upload = can_upload\r\n        self.can_download = can_download\r\n        self.can_delete = can_delete\r\n        self.auto_download = auto_download\r\n\r\nSo downloader is:\r\n\r\n\tdownloader = Watcher(can_upload=False, can_delete=False, auto_download=True)\r\n\r\nAny bug, please contact me at soundbbg@gmail.com.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}